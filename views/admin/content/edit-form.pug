extends ../base

block content

  .row.mt-3
    .col

      .alert.alert-dismissible.alert-success.hide
        button.close(type='button', data-dismiss='alert') ×
        strong Success!
        span.ml-2#success-message  adf

      .alert.alert-dismissible.alert-danger.hide
        button.close(type='button', data-dismiss='alert') ×
        strong Error!
        span.ml-2#error-message  adf

  .row.mt-3
    .col
      form.form#edit-form(name="edit-form")
        .card
          .card-header
            | Editing #{form.title}
          .card-body
            .row
              .col

                .form-group
                  label Title
                  input.form-control#title(name="title", placeholder="", value=form.title)

              .col
                .form-group
                  label ID
                  input.form-control#id(name="_id", value=form._id readonly)

            #pug-content-block-editor
              .card.mt-3
                .card-header
                  | Form Config (YAML)
                .card-body.m-0.p-0(style="height: 90%;")
                    #form-editor
          .card-footer
            button.btn.btn-primary.w-100(type="submit") Save Form


  script.

    const loadEditors = async (id) => {

      const current = await client.service('api/forms').get(id);
      //- pugTemplateEditor = CodeMirror(document.getElementById('pug-editor'), {
      //-   value: "// Your code here\n",
      //-   mode:  "pug",
      //-   indentUnit: 2,
      //-   //smartIndent: true,
      //-   lineNumbers: true
      
      //- });  

      formEditor = monaco.editor.create(document.getElementById('form-editor'), {
        value: [
            current.yaml
          ].join('\\n'),
        language: 'yaml'
      });

      formEditor.getModel().updateOptions({ tabSize: 2 })



      return;
    }
    $( document ).ready( async () => {

      const path = windowLocation.pathname;
      let parts = path.split('/');
      const id = parts[5];

      await login();
      
      await loadEditors(id);
    

      $('#title').on('keyup', () => {
        let title = $('#title').val().toLowerCase();
        
        let id = title.split(' ').join('-');
      
        $('#id').val(id);

      });

        $('#add-content-block-form').on('submit', async (e) => {

          e.preventDefault();

          const blockData = $('#add-content-block-form').serializeJSON();

          blockData.pug_template = await pugTemplateEditor.getValue();

          if(blockData.title.length < 3) {
            let errorMessage = 'A title that contains more than 3 characters is required.'

            $('.alert-danger').show()
            $('#error-message').html(errorMessage)
          } else {

            const check = await client.service('api/content-blocks').find({
              query: {
                _id: blockData._id
              }
            })

            if(check.total == 0) {
              const contentBlock = await client.service('api/content-blocks').create(blockData);
              $('.alert-danger').hide()
              $('.alert-success').show();
              $('#success-message').html('The content block has been saved.');
            }
            else {

              let errorMessage = `A content block with the title <strong>${blockData.title}</strong> already exists`;

              $('.alert-danger').show();
              $('#error-message').html(errorMessage);

            }



          }



        });

    });